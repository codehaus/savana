#!/bin/bash
#
# Savana - Transactional Workspaces for Subversion
# Copyright (C) 2006-2009  Bazaarvoice Inc.
# 
# This file is part of Savana.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# Third party components of this software are provided or made available only subject
# to their respective licenses. The relevant components and corresponding
# licenses are listed in the "licenses" directory in this distribution. In any event,
# the disclaimer of warranty and limitation of liability provision in this Agreement
# will apply to all Software in this distribution.

# To install, install the "bash-completion" package on your system, then include this
# script from your ~/.bash_completion file.  For example:
#
#   source /opt/savana-1.0/etc/bash_completion
#
# Bugs: this script assumes the default release and user branch path locations.
# It does not read the path locations from the .savana metadata file.

# This function completes on Savana branch names.  The '-u' argument
# restricts to user branches and '-r' restricts to release branches.
# No arguments retrieves both.
#
_savbranches()
{
    local svnurl svnproject1 svnproject2 branchparents branches trunk

    branches=""
    trunk=""
    svnurl=$( command svn info 2> /dev/null | command awk '/^URL:/ { print $2 }' )
    [[ $svnurl != "" ]] && {
        # find the URL of the user and release branch parent paths
        svnurl=${svnurl}/
        # strip off everything after /trunk or /branches
        svnproject1=${svnurl%%/trunk/*}
        svnproject2=${svnurl%%/branches/*}
        # pick the shorter result to support urls with both /trunk and /branches
        [[ ${#svnproject1} -lt ${#svnproject2} ]] && svnproject=$svnproject1 || svnproject=$svnproject2
        [[ "${1:--u}" == -u ]] && branchparents=( ${branchparents[@]} ${svnproject}/branches/user )
        [[ "${1:--r}" == -r ]] && branchparents=( ${branchparents[@]} ${svnproject}/branches )
        branches=$( command svn list ${branchparents[@]} | grep -v ^user/ | command tr -d / )
        [[ "${1:--t}" == -t ]] && trunk=trunk
    }
    COMPREPLY=( $( compgen -W "$branches $trunk" -- $cur ) )
}

_sav()
{
	local cur prev commands options command numpositionalargs

	COMPREPLY=()
	cur=${COMP_WORDS[COMP_CWORD]}

    commands='createmetadatafile bootstrap \
        createreleasebranch crb \
        createuserbranch cb cub \
        deleteuserbranch \
        diffchangesfromsource diff \
        help \
        listchangesfromsource lc \
        listreleasebranches lrb \
        listuserbranches lub lb \
        listworkingcopyinfo wci info \
        promote \
        reverttosource rs revert \
        setbranch sb \
        synchronize sync'

	if [[ $COMP_CWORD -eq 1 ]] ; then
		if [[ "$cur" == -* ]]; then
			COMPREPLY=( $( compgen -W '--version' -- $cur ) )
		else
			COMPREPLY=( $( compgen -W "$commands" -- $cur ) )
		fi
	else

		prev=${COMP_WORDS[COMP_CWORD-1]}
		case $prev in
			--config-dir)
				_filedir -d
				return 0;
				;;
			-@(F|-file|-targets))
				_filedir
				return 0;
				;;
			--encoding)
				COMPREPLY=( $( compgen -W \
					'$( iconv --list | sed -e "s@//@@;" )' \
					-- "$cur" ) )
				return 0;
				;;
			--@(editor|diff|diff3)-cmd)
				COMP_WORDS=(COMP_WORDS[0] $cur)
				COMP_CWORD=1
				_command
				return 0;
				;;
		esac

		command=${COMP_WORDS[1]}

		if [[ "$cur" == -* ]]; then
			# possible options for the command
			case $command in
			    @(createmetadatafile|bootstrap))
			        options='--projectName --savanaPoliciesFile \
			            --trunkPath --releaseBranchesPath --userBranchesPath \
					    --username --password --no-auth-cache --non-interactive --config-dir'
			        ;;
				@(createreleasebranch|crb|createuserbranch|cb|cub))
				    options='--force -m --message -F --file \
				        --force-log --editor-cmd --encoding --with-revprop \
					    --username --password --no-auth-cache --non-interactive --config-dir'
					;;
				@(deleteuserbranch|promote))
				    options='-m --message -F --file \
				        --force-log --editor-cmd --encoding --with-revprop \
					    --username --password --no-auth-cache --non-interactive --config-dir'
					;;
		        @(diffchangesfromsource|diff))
		            options='-X --extensions --no-diff-deleted --force \
					    --username --password --no-auth-cache --non-interactive --config-dir'
		            ;;
		        help)
		            options=''
		            ;;
		        @(listchangesfromsource|lc))
		            options='--username --password --no-auth-cache --non-interactive --config-dir'
		            ;;
		        @(listreleasebranches|lrb|listuserbranches|lb|lub))
		            options='--quiet \
		                --username --password --no-auth-cache --non-interactive --config-dir'
		            ;;
		        @(listworkingcopyinfo|wci|info))
		            options='-R --recursive --targets --depth --config-dir'
		            ;;
		        @(reverttosource|rs|revert))
		            options='--targets \
					    --username --password --no-auth-cache --non-interactive --config-dir'
		            ;;
		        @(setbranch|sb))
		            options='--force --changeRoot \
					    --username --password --no-auth-cache --non-interactive --config-dir'
		            ;;
		        @(synchronize|sync))
		            options='--force \
		                --username --password --no-auth-cache --non-interactive --config-dir'
		            ;;
		        --version)
		            options='--quiet'
		            ;;
			esac

			COMPREPLY=( $( compgen -W "$options" -- $cur ) )
		else
			if [[ "$command" == @(help|\?) ]]; then
				COMPREPLY=( $( compgen -W "$commands" -- $cur ) )

			elif [[ "$command" == @(deleteuserbranch|setbranch|sb) ]]; then
                _savbranches

			elif [[ "$command" == @(createuserbranch|cb|cub) ]]; then
				_filedir -d

			elif [[ "$command" == @(listreleasebranches|lrb) ]]; then
                _savbranches -r

			elif [[ "$command" == @(listuserbranches|lb|lub) ]]; then
                _savbranches -u

			else
				_filedir
			fi
		fi
	fi

	return 0
} &&
complete -F _sav $default sav
