help.description=Describe the usage of this program or its subcommands.\n\
usage: help [SUBCOMMAND...]

createreleasebranch.description=\
Create a new release branch in the current project.\n\
usage: createreleasebranch BRANCHNAME\n\
\n\
\ \ Usually a release branch is created for each major version of the project.\n\
\ \ Minor versions and/or patch updates are done within a release branch.\n\
\n\
\ \ The working copy will be switched to the new branch.\n\
\n\
\ \ If there are any locally modified items in the working copy ('svn status'\n\
\ \ reports changes) then creating a release branch will fail.  Use the --force\n\
\ \ option to create the branch anyway.\n\
\n\
\ \ The log message is optional.  If none is provided, a reasonable default\n\
\ \ will be used.

createuserbranch.description=\
Create a new user branch in the current project.\n\
usage: 1. createuserbranch BRANCHNAME\n\
\ \ \ \ \ \ \ 2. createuserbranch BRANCHNAME PATH\n\
\n\
\ \ A user branch is a private workspace where one user can make changes and\n\
\ \ commit without those changes being published immediately to other users.\n\
\n\
\ \ 1. Creates a new user branch in the top-level directory of the current\n\
\ \    working copy (the same location as the .savana file).\n\
\n\
\ \ 2. Creates a new user branch at the specified PATH.\n\
\n\
\ \ The working copy will be switched to the new branch.\n\
\n\
\ \ If there are any locally modified items in the working copy ('svn status'\n\
\ \ reports changes) then creating a user branch will fail.  Use the --force\n\
\ \ option to create the branch anyway.\n\
\n\
\ \ The log message is optional.  If none is provided, a reasonable default\n\
\ \ will be used.

deleteuserbranch.description=\
Delete a user branch from the current project.\n\
usage: deleteuserbranch BRANCHNAME\n\
\n\
\ \ The log message is optional.  If none is provided, a reasonable default\n\
\ \ will be used.\n\
\n\
\ \ Note that a user branch is deleted automatically when it is promoted.

diffchangesfromsource.description=\
Display the changes that will be made by promote.\n\
usage: diffchangesfromsource

listchangesfromsource.description=\
List the files that will be modified by promote.\n\
usage: listchangesfromsource

listreleasebranches.description=\
List the release branches in the project.\n\
usage: listreleasebranches [BRANCHNAME]\n\
\n\
\ \ The branch name argument may contain '*' wildcard characters.

listuserbranches.description=\
List the user branches in the project.\n\
usage: listuserbranches [BRANCHNAME]\n\
\n\
\ \ The branch name argument may contain '*' wildcard characters.

listworkingcopyinfo.description=\
Print metadata about the working copy branch.\n\
usage: listworkingcopyinfo  

promote.description=\
Promote changes from a user branch to its source branch.\n\
usage: promote\n\
\n\
\ \ The user branch will be deleted automatically after a successful promote.\n\
\n\
\ \ Promote performs a switch, a merge, and a commit.  If it fails part way\n\
\ \ through, the working copy may be left in an intermediate state ('svn\n\
\ \ status' will show switched or modified files).  The promote can be\n\
\ \ retried by deleting the working copy, checking out the user branch,\n\
\ \ and restarting the promote.

reverttosource.description=\
Revert changes made in a user branch.\n\
usage: reverttosource PATH...\n\
\n\
\ \ Files and directories in the working copy will be reverted to their state\n\
\ \ in the source branch at the time of the last synchronize operation, or at\n\
\ \ the time the user branch was created if there haven't been any synchronize\n\
\ \ operations.

setbranch.description=\
Switch the working copy to a new branch.\n\
usage: setbranch BRANCHNAME

synchronize.description=\
Pull down changes from a source branch to a user branch.\n\
usage: synchronize\n\
\n\
\ \ Pulls down changes in the source branch that have been made since the user\n\
\ \ branch was created or last synchronized, merges them into the working copy,\n\
\ \ and updates the Savana metadata that tracks merge history.\n\
\n\
\ \ With Savana, use the synchronize command instead of the subversion command\n\
\ \ "svn merge --reintegrate".

createmetadatafile.description=\
Create the .savana metadata file.\n\
usage: 1. createmetadatafile PROJECTROOT trunk\n\
\ \ \ \ \ \ \ 2. createmetadatafile PROJECTROOT release_branch SOURCEBRANCH\n\
\ \ \ \ \ \ \ 3. createmetadatafile PROJECTROOT user_branch SOURCEBRANCH\n\
\n\
\ \ Adds the Savana metadata file '.savana' to the working copy.  PROJECTROOT\n\
\ \ must be the path within the subversion repository to the project root--\n\
\ \ the level immediately above the 'trunk', 'branches' and 'tags' directories.\n\
\n\
\ \ 1. Required one-time configuration of Savana for a subversion project.\n\
\ \ \ \ \ For a new project, this is the only step required to use Savana.\n\
\n\
\ \ 2. Adds Savana support to a release branch that was created before Savana\n\
\ \ \ \ \ was added to the project in the trunk.  The SOURCEBRANCH argument is the\n\
\ \ \ \ \ name of the branch the release branch was created from, either 'trunk'\n\
\ \ \ \ \ or the name of another release branch.\n\
\n\
\ \ 3. Adds Savana support to a user branch that was created before Savana was\n\
\ \ \ \ \ added to the project in the trunk.  The SOURCEBRANCH argument is the\n\
\ \ \ \ \ name of the branch the user branch was created from, either 'trunk' or\n\
\ \ \ \ \ the name of a release branch.\n\
\n\
\ \ Example creation of a new project and use of Savana:\n\
\n\
\ \ # create the project and initial branching structure\n\
\ \ svn mkdir -m "branch admin - created new project" \\\n\
\ \ \ \ https://<host>/<repo>/<dir>/project \\\n\
\ \ \ \ https://<host>/<repo>/<dir>/project/trunk \\\n\
\ \ \ \ https://<host>/<repo>/<dir>/project/branches \\\n\
\ \ \ \ https://<host>/<repo>/<dir>/project/branches/user \\\n\
\ \ \ \ https://<host>/<repo>/<dir>/project/tags\n\
\ \ \n\
\ \ # configure the trunk workspace to support Savana (one-time)\n\
\ \ svn checkout https://<host>/<repo>/<dir>/project/trunk working\n\
\ \ cd working\n\
\ \ sav createmetadatafile <dir>/project trunk\n\
\ \ svn commit -m "trunk - configure project for Savana" .savana\n\
\ \ \n\
\ \ # create a private user branch, make changes, promote to the trunk\n\
\ \ sav createuserbranch user-ticket1432\n\
\ \ ... write code ...\n\
\ \ svn commit -m "user branch commit"\n\
\ \ sav promote -m "trunk - fixed ticket #1432"
